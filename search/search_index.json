{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview Setuptools-pipfile provides a way to dynamically link a setuptools dependency configuration to the Pipfile managed by Pipenv . In basic mode setuptools-pipfile does the following: Populates install_requires from the packages table. Populates tests_require from the dev-packages table. Populates dependency_links from the source tables if needed by dependencies. Advanced configuration can be used to control: The path to the Pipfile. Variable interpolation. Removing indexes from dependency_links . Activate and control populating extras_require . Control populating python_requires . To understand why this isn't enabled by default see Advanced Usage .","title":"Overview"},{"location":"#overview","text":"Setuptools-pipfile provides a way to dynamically link a setuptools dependency configuration to the Pipfile managed by Pipenv . In basic mode setuptools-pipfile does the following: Populates install_requires from the packages table. Populates tests_require from the dev-packages table. Populates dependency_links from the source tables if needed by dependencies. Advanced configuration can be used to control: The path to the Pipfile. Variable interpolation. Removing indexes from dependency_links . Activate and control populating extras_require . Control populating python_requires . To understand why this isn't enabled by default see Advanced Usage .","title":"Overview"},{"location":"basic-setup/","text":"Setup Setuptools-pipfile is not your regular package. It is used by your package build system. Setup Configuration Build System Configuration There are three ways to configure your build system to use setuptools-pipfile. pyproject.toml [build-system] requires = [\"setuptools\", \"wheel\", \"setuptools-pipfile\"] build-backend = \"setuptools.build_meta\" setup.cfg [options] setup_requires = setuptools-pipfile setup.py import setuptools setuptools . setup ( setup_requires = 'setuptools-pipfile' ) The use of a pyproject.toml file is the preferred method as it is future of python packaging. For more information refer to PEP517 . Enable Basic Usage Setuptools-pipfile must be enabled for it to take effect. Enable default behaviour pyproject.toml This is enough to enable default functionality. [tool.setuptools-pipfile] setup.py Add use_pipfile=True in your setup.py. import setuptools setuptools . setup ( use_pipfile = True ) This assumes that the Pipfile is in the same file directory as setup.py. If the Pipfile is located elsewhere you can instead set a relative path. Relocate Pipfile pyproject.toml [tool] setuptools-pipfile = \"src/Pipfile\" setup.py import setuptools setuptools . setup ( use_pipfile = 'src/Pipfile' ) Anything beyond this is considered Advanced Usage .","title":"Setup"},{"location":"basic-setup/#setup","text":"Setuptools-pipfile is not your regular package. It is used by your package build system.","title":"Setup"},{"location":"basic-setup/#setup-configuration","text":"Build System Configuration There are three ways to configure your build system to use setuptools-pipfile. pyproject.toml [build-system] requires = [\"setuptools\", \"wheel\", \"setuptools-pipfile\"] build-backend = \"setuptools.build_meta\" setup.cfg [options] setup_requires = setuptools-pipfile setup.py import setuptools setuptools . setup ( setup_requires = 'setuptools-pipfile' ) The use of a pyproject.toml file is the preferred method as it is future of python packaging. For more information refer to PEP517 .","title":"Setup Configuration"},{"location":"basic-setup/#enable-basic-usage","text":"Setuptools-pipfile must be enabled for it to take effect. Enable default behaviour pyproject.toml This is enough to enable default functionality. [tool.setuptools-pipfile] setup.py Add use_pipfile=True in your setup.py. import setuptools setuptools . setup ( use_pipfile = True ) This assumes that the Pipfile is in the same file directory as setup.py. If the Pipfile is located elsewhere you can instead set a relative path. Relocate Pipfile pyproject.toml [tool] setuptools-pipfile = \"src/Pipfile\" setup.py import setuptools setuptools . setup ( use_pipfile = 'src/Pipfile' ) Anything beyond this is considered Advanced Usage .","title":"Enable Basic Usage"},{"location":"config-advanced/","text":"Advanced Usage These are features that aren't currently provided by pipenv but hope they will be in the future. To enable advanced mode simply provide a dict of options. Pipfile Path To change the path in advanced mode simply set the path key. pyproject.toml [tool.setuptools-pipfile] path = \"src/Pipfile\" setup.py setup ( use_pipfile = { 'path' : 'src/Pipfile' }) Environment Variable Interpolation If this pipenv feature is required for some reason it can reenabled by setting the interpolate key. pyproject.toml [tool.setuptools-pipfile] interpolate = true setup.py setup ( use_pipfile = { 'interpolate' : True }) Note that if interpolation is enabled all index urls will have their basic auth credentials stripped to prevent them from being populated into package metadata. Disabling Custom Index Dependency Links To disable the population of custom index dependency links simply set the indexes key. pyproject.toml [tool.setuptools-pipfile] indexes = false setup.py setup ( use_pipfile = { 'indexes' : False }) To hard set these as a direct urls in install_requires and tests_require against the pep440 advice set to True . pyproject.toml [tool.setuptools-pipfile] indexes = true setup.py setup ( use_pipfile = { 'indexes' : True }) Populate Python Requires Pipfile currently locks to a specific minor version. This is copied to Pipfile.lock. A better behaviour would be to allow defining a range of permissible versions. Then upon running pipenv install a concreate version is locked into Pipfile.lock. To enable this in the future set the pythons key to True . pyproject.toml [tool.setuptools-pipfile] pythons = true setup.py setup ( use_pipfile = { 'pythons' : True }) Alternative Formatting To change the key to lookup set the pythons key to an alternate format string. pyproject.toml [tool.setuptools-pipfile] pythons = \"{0[requires][python_versions]}\" setup.py setup ( use_pipfile = { 'pythons' : ' {0[requires][python_versions]} ' }) Populate Extras This is currently not supported by Pipfile but if it does it will likely be supported in one of three ways. Style One The first and more likely style looks like so: [extra.socks] PySocks = { version = \">=1.5.6, !1.5.7\" } win_inet_pton = { sys_platform = \"win32\" , python_version = \"2.7\" } To use the default setup for style one: pyproject.toml [tool.setuptools-pipfile] extras = true # or [tool.setuptools-pipfile] extras = 1 # or [tool] setuptools-pipfile = 1 setup.py setup ( use_pipfile = { 'extras' : True }) # or setup ( use_pipfile = { 'extras' : 1 }) # or setup ( use_pipfile = 1 ) Rename Table To change the prefix for the table to something like [option.socks] use: pyproject.toml [tool.setuptools-pipfile] extras . table = \"option\" setup.py setup ( use_pipfile = { 'extras' : { 'table' : 'option' }}) Pipfile [[option]] name = \"socks\" [option.packages] PySocks = { version = \">=1.5.6, !1.5.7\" } win_inet_pton = { sys_platform = \"win32\" , python_version = \"2.7\" } Style Two The second style is based on poetry syntax. [[extra]] name = \"socks\" [extra.packages] PySocks = { version = \">=1.5.6, !1.5.7\" } win_inet_pton = { sys_platform = \"win32\" , python_version = \"2.7\" } To use the default setup for style two: pyproject.toml [tool.setuptools-pipfile] extras = 2 # or [tool] setuptools-pipfile = 2 setup.py setup ( use_pipfile = { 'extras' : { 'style' : 2 }}) # or setup ( use_pipfile = { 'extras' : 2 }) # or setup ( use_pipfile = 2 ) Rename Table Like style one use the table field to change the table prefix. pyproject.toml [tool.setuptools-pipfile] extras . style = 2 extras . table = option setup.py setup ( use_pipfile = { 'extras' : { 'style' : 2 , 'table' : 'option' }}) Pipfile [[option]] name = \"socks\" [option.packages] PySocks = { version = \">=1.5.6, !1.5.7\" } win_inet_pton = { sys_platform = \"win32\" , python_version = \"2.7\" } Rename Subtable Use the subtable field to change the suffix used to describe the packages. pyproject.toml [tool.setuptools-pipfile] extra . style = 2 extra . subtable = \"requires\" setup.py setup ( use_pipfile = { 'extras' : { 'style' : 2 , 'subtable' : 'requires' }}) Pipfile [[extra]] name = \"socks\" [extra.requires] PySocks = { version = \">=1.5.6, !1.5.7\" } win_inet_pton = { sys_platform = \"win32\" , python_version = \"2.7\" } Change naming key Finally to change the key used to identify the extra group use: pyproject.toml [tool.setuptools-pipfile] extras . style = 2 extras . key = \"title\" setup.py setup ( use_pipfile = { 'extras' : { 'style' : 2 , 'key' : 'title' }}) Pipfile [[extra]] title = \"socks\" Complete example To change the packaging suffix to something like [extras.require] with a naming key of group use: pyproject.toml [tool.setuptools-pipfile] extras . style = 2 extras . key = \"group\" extras . table = \"extras\" extras . subtable = \"require\" setup.py setup ( use_pipfile = { 'extras' : { 'style' : 2 , 'table' : 'extras' , 'subtable' : 'require' }}) Pipfile [[extras]] group = \"socks\" [extras.require] PySocks = { version = \">=1.5.6, !1.5.7\" } win_inet_pton = { sys_platform = \"win32\" , python_version = \"2.7\" } Style Three The third style is based on the Pipfile dev-packages implementation. [socks-packages] PySocks = { version = \">=1.5.6, !1.5.7\" } win_inet_pton = { sys_platform = \"win32\" , python_version = \"2.7\" } To use style three: pyproject.toml [tool.setuptools-pipfile] extras . style = 3 # or [tool] setuptools-pipfile = 3 setup.py setup ( use_pipfile = { 'extras' : { 'style' : 3 }}) # or setup ( use_pipfile = { 'extras' : 3 }) # or setup ( use_pipfile = 3 ) This last varient is the quickest way to make the dev packages installable. This could be useful for testing frameworks such as tox. Simply specify your dependencies to be .[dev] or package install extras to dev .","title":"Advanced Usage"},{"location":"config-advanced/#advanced-usage","text":"These are features that aren't currently provided by pipenv but hope they will be in the future. To enable advanced mode simply provide a dict of options.","title":"Advanced Usage"},{"location":"config-advanced/#pipfile-path","text":"To change the path in advanced mode simply set the path key. pyproject.toml [tool.setuptools-pipfile] path = \"src/Pipfile\" setup.py setup ( use_pipfile = { 'path' : 'src/Pipfile' })","title":"Pipfile Path"},{"location":"config-advanced/#environment-variable-interpolation","text":"If this pipenv feature is required for some reason it can reenabled by setting the interpolate key. pyproject.toml [tool.setuptools-pipfile] interpolate = true setup.py setup ( use_pipfile = { 'interpolate' : True }) Note that if interpolation is enabled all index urls will have their basic auth credentials stripped to prevent them from being populated into package metadata.","title":"Environment Variable Interpolation"},{"location":"config-advanced/#disabling-custom-index-dependency-links","text":"To disable the population of custom index dependency links simply set the indexes key. pyproject.toml [tool.setuptools-pipfile] indexes = false setup.py setup ( use_pipfile = { 'indexes' : False }) To hard set these as a direct urls in install_requires and tests_require against the pep440 advice set to True . pyproject.toml [tool.setuptools-pipfile] indexes = true setup.py setup ( use_pipfile = { 'indexes' : True })","title":"Disabling Custom Index Dependency Links"},{"location":"config-advanced/#populate-python-requires","text":"Pipfile currently locks to a specific minor version. This is copied to Pipfile.lock. A better behaviour would be to allow defining a range of permissible versions. Then upon running pipenv install a concreate version is locked into Pipfile.lock. To enable this in the future set the pythons key to True . pyproject.toml [tool.setuptools-pipfile] pythons = true setup.py setup ( use_pipfile = { 'pythons' : True })","title":"Populate Python Requires"},{"location":"config-advanced/#alternative-formatting","text":"To change the key to lookup set the pythons key to an alternate format string. pyproject.toml [tool.setuptools-pipfile] pythons = \"{0[requires][python_versions]}\" setup.py setup ( use_pipfile = { 'pythons' : ' {0[requires][python_versions]} ' })","title":"Alternative Formatting"},{"location":"config-advanced/#populate-extras","text":"This is currently not supported by Pipfile but if it does it will likely be supported in one of three ways.","title":"Populate Extras"},{"location":"config-advanced/#style-one","text":"The first and more likely style looks like so: [extra.socks] PySocks = { version = \">=1.5.6, !1.5.7\" } win_inet_pton = { sys_platform = \"win32\" , python_version = \"2.7\" } To use the default setup for style one: pyproject.toml [tool.setuptools-pipfile] extras = true # or [tool.setuptools-pipfile] extras = 1 # or [tool] setuptools-pipfile = 1 setup.py setup ( use_pipfile = { 'extras' : True }) # or setup ( use_pipfile = { 'extras' : 1 }) # or setup ( use_pipfile = 1 )","title":"Style One"},{"location":"config-advanced/#rename-table","text":"To change the prefix for the table to something like [option.socks] use: pyproject.toml [tool.setuptools-pipfile] extras . table = \"option\" setup.py setup ( use_pipfile = { 'extras' : { 'table' : 'option' }}) Pipfile [[option]] name = \"socks\" [option.packages] PySocks = { version = \">=1.5.6, !1.5.7\" } win_inet_pton = { sys_platform = \"win32\" , python_version = \"2.7\" }","title":"Rename Table"},{"location":"config-advanced/#style-two","text":"The second style is based on poetry syntax. [[extra]] name = \"socks\" [extra.packages] PySocks = { version = \">=1.5.6, !1.5.7\" } win_inet_pton = { sys_platform = \"win32\" , python_version = \"2.7\" } To use the default setup for style two: pyproject.toml [tool.setuptools-pipfile] extras = 2 # or [tool] setuptools-pipfile = 2 setup.py setup ( use_pipfile = { 'extras' : { 'style' : 2 }}) # or setup ( use_pipfile = { 'extras' : 2 }) # or setup ( use_pipfile = 2 )","title":"Style Two"},{"location":"config-advanced/#rename-table_1","text":"Like style one use the table field to change the table prefix. pyproject.toml [tool.setuptools-pipfile] extras . style = 2 extras . table = option setup.py setup ( use_pipfile = { 'extras' : { 'style' : 2 , 'table' : 'option' }}) Pipfile [[option]] name = \"socks\" [option.packages] PySocks = { version = \">=1.5.6, !1.5.7\" } win_inet_pton = { sys_platform = \"win32\" , python_version = \"2.7\" }","title":"Rename Table"},{"location":"config-advanced/#rename-subtable","text":"Use the subtable field to change the suffix used to describe the packages. pyproject.toml [tool.setuptools-pipfile] extra . style = 2 extra . subtable = \"requires\" setup.py setup ( use_pipfile = { 'extras' : { 'style' : 2 , 'subtable' : 'requires' }}) Pipfile [[extra]] name = \"socks\" [extra.requires] PySocks = { version = \">=1.5.6, !1.5.7\" } win_inet_pton = { sys_platform = \"win32\" , python_version = \"2.7\" }","title":"Rename Subtable"},{"location":"config-advanced/#change-naming-key","text":"Finally to change the key used to identify the extra group use: pyproject.toml [tool.setuptools-pipfile] extras . style = 2 extras . key = \"title\" setup.py setup ( use_pipfile = { 'extras' : { 'style' : 2 , 'key' : 'title' }}) Pipfile [[extra]] title = \"socks\"","title":"Change naming key"},{"location":"config-advanced/#complete-example","text":"To change the packaging suffix to something like [extras.require] with a naming key of group use: pyproject.toml [tool.setuptools-pipfile] extras . style = 2 extras . key = \"group\" extras . table = \"extras\" extras . subtable = \"require\" setup.py setup ( use_pipfile = { 'extras' : { 'style' : 2 , 'table' : 'extras' , 'subtable' : 'require' }}) Pipfile [[extras]] group = \"socks\" [extras.require] PySocks = { version = \">=1.5.6, !1.5.7\" } win_inet_pton = { sys_platform = \"win32\" , python_version = \"2.7\" }","title":"Complete example"},{"location":"config-advanced/#style-three","text":"The third style is based on the Pipfile dev-packages implementation. [socks-packages] PySocks = { version = \">=1.5.6, !1.5.7\" } win_inet_pton = { sys_platform = \"win32\" , python_version = \"2.7\" } To use style three: pyproject.toml [tool.setuptools-pipfile] extras . style = 3 # or [tool] setuptools-pipfile = 3 setup.py setup ( use_pipfile = { 'extras' : { 'style' : 3 }}) # or setup ( use_pipfile = { 'extras' : 3 }) # or setup ( use_pipfile = 3 ) This last varient is the quickest way to make the dev packages installable. This could be useful for testing frameworks such as tox. Simply specify your dependencies to be .[dev] or package install extras to dev .","title":"Style Three"},{"location":"future-state/","text":"Future State While there is no current plan to develop this further, the future is always changing. If pipenv and the Pipfile implements a different way to do something this will change with it. That being said any breaking changes will be accompanied by a major version increment. To ensure future compatibility either: make sure dependency on this package has an upper bounds on the major version or explicitly set all configuration options. For example to enable extras style 1 and hard set all the current defaults pyproject.toml [tool.setuptools-pipfile] path = \"Pipfile\" interpolate = false pythons = false extras . style = 1 extras . table = \"extra\" setup.py setup ( use_pipfile = { 'path' : 'Pipfile' , 'interpolate' : False , 'pythons' : False , 'extras' : { 'style' : 1 , 'table' : 'extra' } } )","title":"Future State"},{"location":"future-state/#future-state","text":"While there is no current plan to develop this further, the future is always changing. If pipenv and the Pipfile implements a different way to do something this will change with it. That being said any breaking changes will be accompanied by a major version increment. To ensure future compatibility either: make sure dependency on this package has an upper bounds on the major version or explicitly set all configuration options. For example to enable extras style 1 and hard set all the current defaults pyproject.toml [tool.setuptools-pipfile] path = \"Pipfile\" interpolate = false pythons = false extras . style = 1 extras . table = \"extra\" setup.py setup ( use_pipfile = { 'path' : 'Pipfile' , 'interpolate' : False , 'pythons' : False , 'extras' : { 'style' : 1 , 'table' : 'extra' } } )","title":"Future State"}]}